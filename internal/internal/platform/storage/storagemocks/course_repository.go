// Code generated by mockery v2.53.5. DO NOT EDIT.

package storagemocks

import (
	context "context"
	core "hello-go/internal"

	mock "github.com/stretchr/testify/mock"
)

// MockCourseRepository is an autogenerated mock type for the CourseRepository type
type MockCourseRepository struct {
	mock.Mock
}

type MockCourseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCourseRepository) EXPECT() *MockCourseRepository_Expecter {
	return &MockCourseRepository_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: ctx, course
func (_m *MockCourseRepository) Save(ctx context.Context, course core.Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCourseRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCourseRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - course core.Course
func (_e *MockCourseRepository_Expecter) Save(ctx interface{}, course interface{}) *MockCourseRepository_Save_Call {
	return &MockCourseRepository_Save_Call{Call: _e.mock.On("Save", ctx, course)}
}

func (_c *MockCourseRepository_Save_Call) Run(run func(ctx context.Context, course core.Course)) *MockCourseRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Course))
	})
	return _c
}

func (_c *MockCourseRepository_Save_Call) Return(_a0 error) *MockCourseRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCourseRepository_Save_Call) RunAndReturn(run func(context.Context, core.Course) error) *MockCourseRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCourseRepository creates a new instance of MockCourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCourseRepository {
	mock := &MockCourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
